// Mocks generated by Mockito 5.4.5 from annotations
// in ollama_talk/test/setting_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:ollama_talk/domain/models/ollama_chat_entity.dart' as _i6;
import 'package:ollama_talk/domain/models/ollama_entity.dart' as _i4;
import 'package:ollama_talk/domain/models/ollama_generate_entity.dart' as _i5;
import 'package:ollama_talk/domain/repository/device_info_repository.dart'
    as _i8;
import 'package:ollama_talk/domain/repository/ollama_repository.dart' as _i2;
import 'package:ollama_talk/domain/repository/preferences_repository.dart'
    as _i7;
import 'package:ollama_talk/domain/use_cases/update_host_use_case.dart' as _i11;
import 'package:ollama_talk/domain/use_cases/watch_selected_model_use_case.dart'
    as _i10;
import 'package:ollama_talk/ui/core/base/base_command.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [OllamaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOllamaRepository extends _i1.Mock implements _i2.OllamaRepository {
  MockOllamaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.OllamaModelEntity>> getModels() => (super.noSuchMethod(
        Invocation.method(#getModels, []),
        returnValue: _i3.Future<List<_i4.OllamaModelEntity>>.value(
          <_i4.OllamaModelEntity>[],
        ),
      ) as _i3.Future<List<_i4.OllamaModelEntity>>);

  @override
  void cancelCurrentChat() => super.noSuchMethod(
        Invocation.method(#cancelCurrentChat, []),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Stream<_i5.OllamaGenerateEntity> generateResponse({
    required String? model,
    required String? prompt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#generateResponse, [], {
          #model: model,
          #prompt: prompt,
        }),
        returnValue: _i3.Stream<_i5.OllamaGenerateEntity>.empty(),
      ) as _i3.Stream<_i5.OllamaGenerateEntity>);

  @override
  _i3.Stream<_i6.OllamaChatEntity> chat({
    required String? model,
    required List<_i6.OllamaMessageEntity>? messages,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#chat, [], {#model: model, #messages: messages}),
        returnValue: _i3.Stream<_i6.OllamaChatEntity>.empty(),
      ) as _i3.Stream<_i6.OllamaChatEntity>);
}

/// A class which mocks [PreferencesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferencesRepository extends _i1.Mock
    implements _i7.PreferencesRepository {
  MockPreferencesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T? get<T>(_i7.PreferenceKeys<T>? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as T?);

  @override
  _i3.Future<bool> set<T>(_i7.PreferenceKeys<T>? key, T? value) =>
      (super.noSuchMethod(
        Invocation.method(#set, [key, value]),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(#clear, []),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<T?> watch<T>(_i7.PreferenceKeys<T>? key) => (super.noSuchMethod(
        Invocation.method(#watch, [key]),
        returnValue: _i3.Stream<T?>.empty(),
      ) as _i3.Stream<T?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DeviceInfoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoRepository extends _i1.Mock
    implements _i8.DeviceInfoRepository {
  MockDeviceInfoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getAppVersion() => (super.noSuchMethod(
        Invocation.method(#getAppVersion, []),
        returnValue: _i3.Future<String>.value(
          _i9.dummyValue<String>(
            this,
            Invocation.method(#getAppVersion, []),
          ),
        ),
      ) as _i3.Future<String>);
}

/// A class which mocks [WatchOllamaModelsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchOllamaModelsUseCase extends _i1.Mock
    implements _i10.WatchOllamaModelsUseCase {
  MockWatchOllamaModelsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<({List<_i4.OllamaModelEntity> models, String? selectedModel})>
      get stream => (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i3.Stream<
                ({
                  List<_i4.OllamaModelEntity> models,
                  String? selectedModel
                })>.empty(),
          ) as _i3.Stream<
              ({List<_i4.OllamaModelEntity> models, String? selectedModel})>);
}

/// A class which mocks [UpdateHostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateHostUseCase extends _i1.Mock implements _i11.UpdateHostUseCase {
  MockUpdateHostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void execute(String? newHost) => super.noSuchMethod(
        Invocation.method(#execute, [newHost]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UICommandController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUICommandController extends _i1.Mock
    implements _i12.UICommandController {
  MockUICommandController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i12.UICommand> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i12.UICommand>.empty(),
      ) as _i3.Stream<_i12.UICommand>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void showSnackBar({
    required String? message,
    required Duration? duration,
    _i13.SnackBarAction? action,
  }) =>
      super.noSuchMethod(
        Invocation.method(#showSnackBar, [], {
          #message: message,
          #duration: duration,
          #action: action,
        }),
        returnValueForMissingStub: null,
      );

  @override
  void showToast({required String? message, required Duration? duration}) =>
      super.noSuchMethod(
        Invocation.method(#showToast, [], {
          #message: message,
          #duration: duration,
        }),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
